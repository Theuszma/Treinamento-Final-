generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Produtos {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  descricao    String
  preco        Float
  categorias   Categorias[] @relation(fields: [categoriaIds], references: [id])
  categoriaIds String[]     @db.ObjectId
  compras      Compras[]    @relation(fields: [compraIds], references: [id])
  compraIds    String[]     @db.ObjectId
}

model Categorias {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  nome       String     @unique
  produtos   Produtos[] @relation(fields: [produtoIds], references: [id])
  produtoIds String[]   @db.ObjectId
}

model Compras {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  precoTotal Float
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  produtos   Produtos[] @relation(fields: [produtoIds], references: [id])
  produtoIds String[]   @db.ObjectId
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified Boolean?
  image         String?
  role          Role      @default(USER)
  compras       Compras[]
  sessions      Session[]
  accounts      Account[]
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  @@map("verification")
}